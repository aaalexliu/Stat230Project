anova(best_step_model)
step_SSE <- 0.0095
anova(best_subset_model)
subset_SSE <- 0.0084
anova(best_back_model)
back_SSE <- 0.0099
calculate_cp <- function(SSE, MSE, m, n){
return (SSE/MSE + 2*(m+1) - n)
}
step_cp <- calculate_cp(step_SSE, MSE, 4, 30)
subset_cp <- calculate_cp(subset_SSE, MSE, 4, 30)
back_cp <- calculate_cp(back_SSE, MSE, 4, 30)
print(paste("Stepwise CP: ", step_cp))
print(paste("Subset CP: ", subset_cp))
print(paste("Back CP: ", back_cp))
your.mod1 <- lm(price_bought ~ msrp_bought + mileage_bought + trim_bought + dma_bought + model_year_bought, data = ds2)
ds2 <- mutate(ds, make_bought = as.factor(make_bought),
model_bought = as.factor(model_bought), trim_bought = as.factor(trim_bought),
bodytype_bought = as.factor(bodytype_bought),
transmission_bought = as.factor(transmission_bought),
new_or_used_bought = as.factor(new_or_used_bought), dma_bought = as.factor(dma_bought))
# Chunk 1
# Don't delete this chunk if you are using the mosaic package
# This loads the mosaic and car packages
require(mosaic); require(car); require(leaps); require(MASS)
require(agricolae) #for Fisher's LSD
# Chunk 2
# Some customization.  You can alter or delete as desired (if you know what you are doing).
# This changes the default colors in lattice plots.
trellis.par.set(theme=theme.mosaic())
# knitr settings to control how R chunks work.
require(knitr)
opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small"    # slightly smaller font for code
)
# This loads the mosaic data sets.  (Could be deleted if you are not using them.)
#require(mosaicData)
options(digits=3)
# Chunk 3
download.file("http://www.amherst.edu/~sliao/data/edmunds_civics.rds", "edmunds_civics.rds")
# getwd()           # get the working directory
# list.files()      # list the files in the working directory
ds <- readRDS("edmunds_civics.rds")
# Chunk 4
# Chunk 5
ds <- mutate(ds, state_bought = as.factor(state_bought))
# Chunk 6
# Chunk 7
# Chunk 8
# Chunk 9
#m1 <- lm( ~ , data=ds)
#anova(m1)
# Chunk 10
# Chunk 11
set.seed(230)
permtest <- do(1000)*lm(price_bought ~ shuffle(state_bought), data = ds)
names(permtest)
histogram(~permtest$F)
# pdata(permtest$F, actual.f.stat, lower.tail=FALSE)   #find out the actual.f.stat value from above
# Chunk 12
#mod.dfe <- anova(m1)$Df[2]
#mod.mse <- anova(m1)$"Mean Sq"[2]
#LSD.test(m1, "state_bought", DFerror = mod.dfe, MSerror = mod.mse, console=TRUE, alpha=.05)
# Chunk 13
#pairwise.t.test( , , p.adj="bonf")
# Chunk 14
#TukeyHSD()
# Chunk 15
my.full <- lm(price_bought ~ mileage_bought, data = ds)
summary(my.full)
# Chunk 16
download.file("http://www.amherst.edu/~sliao/data/edmunds_civics_holdout.rds", "edmunds_civics_holdout.rds")
holdout <- readRDS("edmunds_civics_holdout.rds")
#summary(holdout)
yhats <- predict(my.full, newdata = holdout)
# Chunk 17
mean((holdout$price_bought - yhats)^2, na.rm=T)   # MSE = sum of squard residuals
ds2 <- mutate(ds, make_bought = as.factor(make_bought),
model_bought = as.factor(model_bought), trim_bought = as.factor(trim_bought),
bodytype_bought = as.factor(bodytype_bought),
transmission_bought = as.factor(transmission_bought),
new_or_used_bought = as.factor(new_or_used_bought), dma_bought = as.factor(dma_bought))
your.mod1 <- lm(price_bought ~ msrp_bought + mileage_bought + trim_bought + dma_bought + model_year_bought, data = ds2)
yhats1 <- predict(your.mod1, newdata = holdout)
your.mod1 <- lm(price_bought ~ msrp_bought + mileage_bought + dma_bought + model_year_bought, data = ds2)
yhats1 <- predict(your.mod1, newdata = holdout)
str(dma_bought)
your.mod1 <- lm(price_bought ~ msrp_bought + mileage_bought + model_year_bought, data = ds2)
yhats1 <- predict(your.mod1, newdata = holdout)
mean((holdout$price_bought - yhats)^2, na.rm=T)
yhats <- predict(my.full, newdata = holdout)
mean((holdout$price_bought - yhats)^2, na.rm=T)   # MSE = sum of squard residuals
mean((holdout$price_bought - yhats1)^2, na.rm=T)
state_bought, as.factor(state_bought))
state_bought = as.factor(state_bought))
holdout2 <-  mutate(holdout, make_bought = as.factor(make_bought),
model_bought = as.factor(model_bought), trim_bought = as.factor(trim_bought),
bodytype_bought = as.factor(bodytype_bought),
transmission_bought = as.factor(transmission_bought),
new_or_used_bought = as.factor(new_or_used_bought), dma_bought = as.factor(dma_bought),
state_bought = as.factor(state_bought))
your.mod1 <- lm(price_bought ~ msrp_bought + mileage_bought + model_year_bought, data = ds2)
yhats1 <- predict(your.mod1, newdata = holdout)
your.mod1 <- lm(price_bought ~ msrp_bought + mileage_bought + model_year_bought, data = ds2)
yhats1 <- predict(your.mod1, newdata = holdout2)
mean((holdout$price_bought - yhats1)^2, na.rm=T)
your.mod2 <- lm(price_bought ~ msrp_bought + msrp_bought * model_year_bought + mileage_bought + mileage_bought, data = ds2)
summary(your.mod2)
your.mod1 <- lm(price_bought ~ msrp_bought + mileage_bought + model_year_bought, data = ds2)
yhats1 <- predict(your.mod1, newdata = holdout2)
summary(your.mod1)
summary(ds$model_year_bought)
summary(your.mod2)
yhats2 <- predict(your.mod2, newdata = holdout2)
mean((holdout$price_bought - yhats2)^2, na.rm=T)
mean((holdout$price_bought - yhats1)^2, na.rm=T)
your.mod2 <- lm(price_bought ~ msrp_bought + msrp_bought * model_year_bought + mileage_bought, data = ds2)
summary(your.mod2)
summary(your.mod2)
yhats2 <- predict(your.mod2, newdata = holdout2)
mean((holdout$price_bought - yhats2)^2, na.rm=T)
# Chunk 1
# Don't delete this chunk if you are using the mosaic package
# This loads the mosaic and car packages
require(mosaic); require(car); require(leaps); require(MASS)
require(agricolae) #for Fisher's LSD
# Chunk 2
# Some customization.  You can alter or delete as desired (if you know what you are doing).
# This changes the default colors in lattice plots.
trellis.par.set(theme=theme.mosaic())
# knitr settings to control how R chunks work.
require(knitr)
opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small"    # slightly smaller font for code
)
# This loads the mosaic data sets.  (Could be deleted if you are not using them.)
#require(mosaicData)
options(digits=3)
# Chunk 3
download.file("http://www.amherst.edu/~sliao/data/edmunds_civics.rds", "edmunds_civics.rds")
# getwd()           # get the working directory
# list.files()      # list the files in the working directory
ds <- readRDS("edmunds_civics.rds")
# Chunk 4
summary(ds)
# Chunk 5
ds <- mutate(ds, state_bought = as.factor(state_bought))
# Chunk 6
densityplot(~price_bought, data=ds)
favstats(~price_bought, data=ds)
# Chunk 7
bwplot(price_bought ~ state_bought, data=ds)
# Chunk 8
mean(price_bought ~ state_bought, data=ds)-mean(~price_bought, data=ds)
# Chunk 9
m1 <- lm(price_bought ~ state_bought, data=ds)
anova(m1)
# Chunk 10
plot(m1, which=1)
plot(m1, which=2)
# Chunk 11
set.seed(230)
permtest <- do(1000)*lm(price_bought ~ shuffle(state_bought), data = ds)
names(permtest)
histogram(~permtest$F)
pdata(permtest$F, 4.12, lower.tail=FALSE)   #find out the actual.f.stat value from above
# Chunk 12
mod.dfe <- anova(m1)$Df[2]
mod.mse <- anova(m1)$"Mean Sq"[2]
LSD.test(m1, "state_bought", DFerror = mod.dfe, MSerror = mod.mse, console=TRUE, alpha=.05)
# Chunk 13
with(ds, pairwise.t.test(price_bought, state_bought, p.adj="bonf"))
# Chunk 14
TukeyHSD(m1)
# Chunk 15
my.full <- lm(price_bought ~ mileage_bought, data = ds)
summary(my.full)
# Chunk 16
download.file("http://www.amherst.edu/~sliao/data/edmunds_civics_holdout.rds", "edmunds_civics_holdout.rds")
holdout <- readRDS("edmunds_civics_holdout.rds")
summary(holdout)
yhats <- predict(my.full, newdata = holdout)
# Chunk 17
mean((holdout$price_bought - yhats)^2, na.rm=T)   # MSE = sum of squard residuals
ds2 <- mutate(ds, make_bought = as.factor(make_bought),
model_bought = as.factor(model_bought), trim_bought = as.factor(trim_bought),
bodytype_bought = as.factor(bodytype_bought),
transmission_bought = as.factor(transmission_bought),
new_or_used_bought = as.factor(new_or_used_bought), dma_bought = as.factor(dma_bought))
holdout2 <-  mutate(holdout, make_bought = as.factor(make_bought),
model_bought = as.factor(model_bought), trim_bought = as.factor(trim_bought),
bodytype_bought = as.factor(bodytype_bought),
transmission_bought = as.factor(transmission_bought),
new_or_used_bought = as.factor(new_or_used_bought), dma_bought = as.factor(dma_bought),
state_bought = as.factor(state_bought), model)
holdout2 <-  mutate(holdout, make_bought = as.factor(make_bought),
model_bought = as.factor(model_bought), trim_bought = as.factor(trim_bought),
bodytype_bought = as.factor(bodytype_bought),
transmission_bought = as.factor(transmission_bought),
new_or_used_bought = as.factor(new_or_used_bought), dma_bought = as.factor(dma_bought),
state_bought = as.factor(state_bought), model)
holdout2 <-  mutate(holdout, make_bought = as.factor(make_bought),
model_bought = as.factor(model_bought), trim_bought = as.factor(trim_bought),
bodytype_bought = as.factor(bodytype_bought),
transmission_bought = as.factor(transmission_bought),
new_or_used_bought = as.factor(new_or_used_bought), dma_bought = as.factor(dma_bought),
state_bought = as.factor(state_bought))
your.mod1 <- lm(price_bought ~ msrp_bought + mileage_bought + model_year_bought, data = ds2)
summary(your.mod1)
yhats1 <- predict(your.mod1, newdata = holdout2)
mean((holdout$price_bought - yhats1)^2, na.rm=T)
your.mod2 <- lm(price_bought ~ msrp_bought + msrp_bought * model_year_bought + mileage_bought, data = ds2)
summary(your.mod2)
yhats2 <- predict(your.mod2, newdata = holdout2)
mean((holdout$price_bought - yhats2)^2, na.rm=T)
# Chunk 1
require(mosaic); require(Stat2Data); require(MASS); require(leaps); require(tidyr); require(agricolae) #for Fisher's LSD;
options(digits=3)
trellis.par.set(theme=col.mosaic())  # get a better color scheme for lattice
meth_anova <- data.frame(Source = c("type", "Error", "Total"), DF = c (2, 9, 11), SS = c(37.51, 70.6 - 37.51, 70.6))
meth_anova <- mutate(meth_anova, MS = SS/DF)
meth_anova$F <- meth_anova[1, "MS"]/meth_anova[2, "MS"]
meth_anova[3,"MS"] <- NA
meth_anova[2:3, "F"] <- NA
meth_anova
# Chunk 1
require(mosaic); require(Stat2Data); require(MASS); require(leaps); require(tidyr); require(agricolae) #for Fisher's LSD;
options(digits=3)
trellis.par.set(theme=col.mosaic())  # get a better color scheme for lattice
# Chunk 2
meth_anova <- data.frame(Source = c("type", "Error", "Total"), DF = c (2, 9, 11), SS = c(37.51, 70.6 - 37.51, 70.6))
meth_anova <- mutate(meth_anova, MS = SS/DF)
meth_anova$F <- meth_anova[1, "MS"]/meth_anova[2, "MS"]
meth_anova[3,"MS"] <- NA
meth_anova[2:3, "F"] <- NA
meth_anova
# Chunk 3
pf(5.1,2,9,lower.tail=FALSE)
# Chunk 4
data("FantasyBaseball")
FB <- gather(FantasyBaseball,Person,Time,-Round)   #shorter to type data set name, and did some data management
# Chunk 5
boxplot <- boxplot(Time ~ Person, data = FB)
boxplot$stats
# Chunk 6
FB_aov <- aov(Time ~ Person, data = FB)
summary(FB_aov)
# Chunk 7
library(agricolae)
LSD.test(FB_aov, "Person", console = TRUE)
LSD.test(FB_aov, "Person", group = FALSE, console = TRUE)
# Chunk 8
data(Olives)
# Chunk 9
olives_aov <- aov(Fenthion ~ Time, data = Olives)
boxplot(Fenthion ~ Time, data = Olives)
# Chunk 10
plot(olives_aov, which = 1)
by(Olives$Fenthion,Olives$Time,sd)
Smax <- 0.173
Smin <- 0.0677
Smax/Smin
# Chunk 11
plot(olives_aov, which = 2)
plot(olives_aov, which = 3)
plot(olives_aov, which = 4)
plot(olives_aov, which = 5)
# Chunk 12
Olives <- mutate(Olives, EFenthion=exp(Fenthion))
olives_aov2 <- aov(EFenthion ~ Time, data = Olives)
boxplot(EFenthion ~ Time, data = Olives)
# Chunk 13
plot(olives_aov2, which = 1)
by(Olives$EFenthion,Olives$Time,sd)
Smax <- 0.481
Smin <- 0.443
Smax/Smin
# Chunk 14
plot(olives_aov2, which = 2)
densityplot(~EFenthion | Time, data = Olives)
# Chunk 15
plot(olives_aov2, which = 3)
plot(olives_aov2, which = 4)
plot(olives_aov2, which = 5)
summary(olives_aov2)
anova(mod1)
mod1 <- lm(registered ~ weathersitc + holiday, data = bike)
anova(mod1)
plot(mod1, which = 1)
plot(mod1, which = 2)
# Chunk 1
# Don't delete this chunk if you are using the mosaic package
# This loads the mosaic and car packages
require(mosaic)
# Chunk 2
# Some customization.  You can alter or delete as desired (if you know what you are doing).
# This changes the default colors in lattice plots.
trellis.par.set(theme=theme.mosaic())
# knitr settings to control how R chunks work.
require(knitr)
opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small"    # slightly smaller font for code
)
# This loads the mosaic data sets.  (Could be deleted if you are not using them.)
#require(mosaicData)
options(digits=3)
# Chunk 3
bike <- read.csv("http://www.amherst.edu/~sliao/data/bikerental.csv")
#summary(bike)
# Chunk 4
bike <- mutate(bike, holiday = as.factor(ifelse(holiday==1,"Holiday","NonHoliday")))
bike <- mutate(bike, weekday = factor(weekday,
labels=c("Sunday","Monday","Tuesdsay","Wednesday","Thursday","Friday","Saturday")))
#summary(bike)   #you can check those changes with summary()
# Chunk 5
bike <- mutate(bike, workingday = as.factor(ifelse(workingday == 1, "Working", "NonWorking")))
bike <- mutate(bike, weathersitc = factor(weathersit,
labels = c("Clear", "Mist", "Precip")))
# Chunk 6
bwplot(registered ~ weathersitc, data = bike)
favstats(registered ~ weathersitc, data = bike)
# Chunk 7
bwplot(registered ~ holiday, data = bike)
favstats(registered ~ holiday, data = bike)
# Chunk 8
tally(~ weathersitc + holiday, data=bike)
# Chunk 9
#Find example code in ANOVA Class Example 3
bwplot(registered ~ weathersitc | holiday, data = bike)
favstats(registered ~ weathersitc | holiday, data = bike)
# Chunk 10
mod1 <- lm(registered ~ weathersitc + holiday, data = bike)
anova(mod1)
plot(mod1, which = 1)
plot(mod1, which = 2)
anova(mod1)
TukeyHSD(mod1)
summary(mod1)
with(bike, interaction.plot(holiday, weathersitc, registered))
with(bike, interaction.plot(weathersitc, holiday, registered))   #the SECOND var has the lines generated
lm(registered ~ weathersitc + holiday + weathersitc*holiday, data = bike)
mod2 <- lm(registered ~ weathersitc + holiday + weathersitc*holiday, data = bike)
plot(mod2, which = 1)
plot(mod2, which = 2)
plot(mod2, which = 1)
plot(mod2, which = 2)
anova(mod2)
BST <- data.frame(c(rep("Males", 6), rep("Females", 6))
BST <- data.frame(c(rep("Males", 6), rep("Females", 6), c(rep("Blood", "Blood", "Sweat", "Sweat", "Tears", "Tears"), 2), c(5, 10, 10, 20, 15, 15, 15, 20, 20, 30, 25, 25))
BST <- data.frame(c(rep("Males", 6), rep("Females", 6), c(rep("Blood", "Blood", "Sweat", "Sweat", "Tears", "Tears"), 2), c(5, 10, 10, 20, 15, 15, 15, 20, 20, 30, 25, 25))
```
BST <- data.frame(c(rep("Males", 6), rep("Females", 6), c(rep("Blood", "Blood", "Sweat", "Sweat", "Tears", "Tears"), 2), c(5, 10, 10, 20, 15, 15, 15, 20, 20, 30, 25, 25)))
BST <- data.frame(c(rep("Males", 6), rep("Females", 6), c(rep("Blood", "Blood", "Sweat", "Sweat", "Tears", "Tears"), 2), c(5, 10, 10, 20, 15, 15, 15, 20, 20, 30, 25, 25)))
BST
BST <- data.frame(c(rep("Males", 6), rep("Females", 6), c(rep(c("Blood", "Blood", "Sweat", "Sweat", "Tears", "Tears")), 2), c(5, 10, 10, 20, 15, 15, 15, 20, 20, 30, 25, 25)))
BST
BST <- data.frame(sex = c(rep("Males", 6), rep("Females", 6), bst = c(rep(c("Blood", "Blood", "Sweat", "Sweat", "Tears", "Tears")), 2), response = c(5, 10, 10, 20, 15, 15, 15, 20, 20, 30, 25, 25)))
BST
?data.frame
BST <- data.frame(sex = c(rep("Males", 6), rep("Females", 6), bst = c(rep(c("Blood", "Blood", "Sweat", "Sweat", "Tears", "Tears")), 2), response = c(5, 10, 10, 20, 15, 15, 15, 20, 20, 30, 25, 25)), stringsAsFactors = TRUE)
BST
BST <- data.frame(sex = c(rep("Males", 6), rep("Females", 6)), bst = c(rep(c("Blood", "Blood", "Sweat", "Sweat", "Tears", "Tears")), 2), response = c(5, 10, 10, 20, 15, 15, 15, 20, 20, 30, 25, 25)), stringsAsFactors = TRUE)
BST <- data.frame(sex = c(rep("Males", 6), rep("Females", 6)), bst = c(rep(c("Blood", "Blood", "Sweat", "Sweat", "Tears", "Tears")), 2), response = c(5, 10, 10, 20, 15, 15, 15, 20, 20, 30, 25, 25), stringsAsFactors = TRUE)
BST <- data.frame(sex = c(rep("Males", 6), rep("Females", 6)), bst = c(rep(c("Blood", "Blood", "Sweat", "Sweat", "Tears", "Tears"), 2)), response = c(5, 10, 10, 20, 15, 15, 15, 20, 20, 30, 25, 25), stringsAsFactors = TRUE)
BST
aggregate(response ~ sex + bst, FUN=mean)
aggregate(response ~ sex + bst, FUN=mean, data = BST)
BST_mean <- aggregate(response ~ sex + bst, FUN=mean, data = BST)
xtabs(BST_mean)
table(BST_mean)
xtabs(response ~ ., data = BST_mean)
with(BST, interaction.plot(sex, bst, response))
with(BST, interaction.plot(bst, sex, response))
Sex <- c("M","M","F","F")
HappyFace <- c("Yes","No","Yes","No")
PercentTip <- c(18, 21, 33, 28)
interaction.plot(Sex, HappyFace, PercentTip)
smiley <- data.frame(sex = Sex, HappyFace = HappyFace, PercentTip = PercentTip, stringsAsFactors = TRUE)
head(smiley)
mod1 <- lm(PercentTip ~ Sex + HappyFace, data = smiley)
anova(mod1)
SSTotal - SSFace - SSGender - SSResiduals
SSTotal - 12615 - 2500 - 9900
SSTotal <- 25415
SSTotal - 12615 - 2500 - 9900
SSTotal - 12615 - 2500 - 9900 -400
data(Popcorn)
# Chunk 1
require(mosaic); require(Stat2Data); require(MASS); require(leaps); require(tidyr); require(agricolae) #for Fisher's LSD;
options(digits=3)
trellis.par.set(theme=col.mosaic())  # get a better color scheme for lattice
# Chunk 2
BST <- data.frame(sex = c(rep("Males", 6), rep("Females", 6)), bst = c(rep(c("Blood", "Blood", "Sweat", "Sweat", "Tears", "Tears"), 2)), response = c(5, 10, 10, 20, 15, 15, 15, 20, 20, 30, 25, 25), stringsAsFactors = TRUE)
BST_mean <- aggregate(response ~ sex + bst, FUN=mean, data = BST)
xtabs(response ~ ., data = BST_mean)
with(BST, interaction.plot(bst, sex, response))
# Chunk 3
Sex <- c("M","M","F","F")
HappyFace <- c("Yes","No","Yes","No")
PercentTip <- c(18, 21, 33, 28)
interaction.plot(Sex, HappyFace, PercentTip)
# Chunk 4
smiley <- data.frame(sex = Sex, HappyFace = HappyFace, PercentTip = PercentTip, stringsAsFactors = TRUE)
smiley
mod1 <- lm(PercentTip ~ Sex + HappyFace, data = smiley)
anova(mod1)
# Chunk 5
SSTotal <- 25415
SSTotal - 12615 - 2500 - 9900 -400
data(Popcorn)
pop <- Popcorn
head(pop)
str(pop)
pop <- mutate(pop, Trial_Factor = as.factor(Trial))
str(pop)
pop1 <- lm(Unpopped ~ Brand, data = pop)
anova(pop1)
lm(brand)
lm(pop1)
summary(pop1)
pop_mean <- aggregate(Unpopped ~ Brand, FUN = mean, data = pop)
pop_mean
print(paste("Orville Effect:", pop_mean["Orville", 2]))
pop_mean[1,2]
print(paste("Seaway Effect:", pop_mean[2, 2] - grand_mean))
grand_mean <- mean(pop$Unpopped)
print(paste("Entire Sample Mean =", grand_mean))
pop_mean <- aggregate(Unpopped ~ Brand, FUN = mean, data = pop)
print(paste("Orville Effect:", pop_mean[1, 2] - grand_mean))
print(paste("Seaway Effect:", pop_mean[2, 2] - grand_mean))
plot(pop1, which = 2)
pop1 <- lm(Unpopped ~ Brand + Trial, data = pop)
plot(pop1, which = 1)
plot(pop1, which = 2)
plot(pop1, which = 1)
pop1 <- lm(Unpopped ~ Brand + Trial_Factor, data = pop)
plot(pop1, which = 1)
plot(pop1, which = 2)
plot(pop1, which = 1)
summary(pop1)
plot(pop1, which = 2)
mod1 <- lm(registered ~ weathersitc + holiday, data = bike)
anova(mod1)
plot(mod1, which = 1)
plot(mod1, which = 2)
pop
pop1 <- lm(Unpopped ~ Brand + Trial_Factor, data = pop)
plot(pop1, which = 1)
pop1 <- lm(Unpopped ~ Brand + Trial_Factor, data = pop)
plot(pop1, which = 1)
plot(pop1, which = 2)
plot(pop1, which = 1)
plot(pop1, which = 2)
summary(pop1)
anova(pop1)
data(Swahili)
with(Swahili, interaction.plot(Province, Sex, Attitude.Score))
Swahili
str(Swahili)
attitude <- lm(Attitude.Score ~ Sex + Province, data = Swahili)
plot(attitude, which = 1)
plot(attitude, which = 2)
plot(attitude, which = 1)
plot(attitude, which = 2)
attitude <- lm(Attitude.Score ~ Sex + Province + Sex*Province, data = Swahili)
plot(attitude, which = 1)
plot(attitude, which = 2)
plot(attitude, which = 1)
plot(attitude, which = 1)
plot(attitude, which = 2)
anova(attitude)
attitude <- lm(Attitude.Score ~ Sex + Province + Sex*Province, data = Swahili)
with(Swahili, interaction.plot(Province, Sex, Attitude.Score))
plot(attitude, which = 1)
plot(attitude, which = 2)
head(Swahili)
tally(School ~ Province, data = Swahili)
?pf
pf(5.81, 2, 10)
pf(5.81, 2, 10, lower.tail= FALSE)
pf(237, 5, 10, lower.tail= FALSE)
?qt
setwd('/Users/Alex/Dropbox (Amherst College)/Amherst/Intermediate Statistics 230/val_project/valscraper')
df <- read.csv('FINALvalclusteredwithswipes.csv')
head(df)
View(df)
str(df)
histogram(counts)
library(mosaic)
histogram(counts, data = df)
str(df)
histogram(count, data = df)
histogram(df$count)
histogram(df$count)
histogram(df$count)
favstats(df$count)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(mosaic)
# Chunk 2
setwd('/Users/Alex/Dropbox (Amherst College)/Amherst/Intermediate Statistics 230/val_project/valscraper')
df <- read.csv('FINALvalclusteredwithswipes.csv')
# Chunk 3
head(df)
str(df)
histogram(df$count)
favstats(df$count)
histogram(df$count)
favstats(df$count)
